# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import tone_service_pb2 as tone__service__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tone_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ToneAnalysisServiceStub(object):
    """===== TONE ANALYSIS SERVICE =====
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeTone = channel.unary_unary(
                '/tone.ToneAnalysisService/AnalyzeTone',
                request_serializer=tone__service__pb2.ToneAnalysisRequest.SerializeToString,
                response_deserializer=tone__service__pb2.ToneAnalysisResponse.FromString,
                _registered_method=True)
        self.BatchAnalyzeTone = channel.unary_unary(
                '/tone.ToneAnalysisService/BatchAnalyzeTone',
                request_serializer=tone__service__pb2.BatchToneAnalysisRequest.SerializeToString,
                response_deserializer=tone__service__pb2.BatchToneAnalysisResponse.FromString,
                _registered_method=True)
        self.GetToneProfile = channel.unary_unary(
                '/tone.ToneAnalysisService/GetToneProfile',
                request_serializer=tone__service__pb2.ToneProfileRequest.SerializeToString,
                response_deserializer=tone__service__pb2.ToneProfileResponse.FromString,
                _registered_method=True)
        self.UpdateToneProfile = channel.unary_unary(
                '/tone.ToneAnalysisService/UpdateToneProfile',
                request_serializer=tone__service__pb2.UpdateToneProfileRequest.SerializeToString,
                response_deserializer=tone__service__pb2.ToneProfileResponse.FromString,
                _registered_method=True)
        self.StreamToneAnalysis = channel.stream_stream(
                '/tone.ToneAnalysisService/StreamToneAnalysis',
                request_serializer=tone__service__pb2.ToneAnalysisRequest.SerializeToString,
                response_deserializer=tone__service__pb2.ToneAnalysisResponse.FromString,
                _registered_method=True)
        self.TrainUserModel = channel.unary_unary(
                '/tone.ToneAnalysisService/TrainUserModel',
                request_serializer=tone__service__pb2.TrainModelRequest.SerializeToString,
                response_deserializer=tone__service__pb2.TrainModelResponse.FromString,
                _registered_method=True)


class ToneAnalysisServiceServicer(object):
    """===== TONE ANALYSIS SERVICE =====
    """

    def AnalyzeTone(self, request, context):
        """Analyze tone of a message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchAnalyzeTone(self, request, context):
        """Batch analyze multiple messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetToneProfile(self, request, context):
        """Get user's tone profile
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateToneProfile(self, request, context):
        """Update user's tone profile
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamToneAnalysis(self, request_iterator, context):
        """Stream real-time tone analysis
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrainUserModel(self, request, context):
        """Train tone model for specific user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ToneAnalysisServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeTone': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeTone,
                    request_deserializer=tone__service__pb2.ToneAnalysisRequest.FromString,
                    response_serializer=tone__service__pb2.ToneAnalysisResponse.SerializeToString,
            ),
            'BatchAnalyzeTone': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchAnalyzeTone,
                    request_deserializer=tone__service__pb2.BatchToneAnalysisRequest.FromString,
                    response_serializer=tone__service__pb2.BatchToneAnalysisResponse.SerializeToString,
            ),
            'GetToneProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetToneProfile,
                    request_deserializer=tone__service__pb2.ToneProfileRequest.FromString,
                    response_serializer=tone__service__pb2.ToneProfileResponse.SerializeToString,
            ),
            'UpdateToneProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateToneProfile,
                    request_deserializer=tone__service__pb2.UpdateToneProfileRequest.FromString,
                    response_serializer=tone__service__pb2.ToneProfileResponse.SerializeToString,
            ),
            'StreamToneAnalysis': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamToneAnalysis,
                    request_deserializer=tone__service__pb2.ToneAnalysisRequest.FromString,
                    response_serializer=tone__service__pb2.ToneAnalysisResponse.SerializeToString,
            ),
            'TrainUserModel': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainUserModel,
                    request_deserializer=tone__service__pb2.TrainModelRequest.FromString,
                    response_serializer=tone__service__pb2.TrainModelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tone.ToneAnalysisService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tone.ToneAnalysisService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ToneAnalysisService(object):
    """===== TONE ANALYSIS SERVICE =====
    """

    @staticmethod
    def AnalyzeTone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tone.ToneAnalysisService/AnalyzeTone',
            tone__service__pb2.ToneAnalysisRequest.SerializeToString,
            tone__service__pb2.ToneAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchAnalyzeTone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tone.ToneAnalysisService/BatchAnalyzeTone',
            tone__service__pb2.BatchToneAnalysisRequest.SerializeToString,
            tone__service__pb2.BatchToneAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetToneProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tone.ToneAnalysisService/GetToneProfile',
            tone__service__pb2.ToneProfileRequest.SerializeToString,
            tone__service__pb2.ToneProfileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateToneProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tone.ToneAnalysisService/UpdateToneProfile',
            tone__service__pb2.UpdateToneProfileRequest.SerializeToString,
            tone__service__pb2.ToneProfileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamToneAnalysis(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/tone.ToneAnalysisService/StreamToneAnalysis',
            tone__service__pb2.ToneAnalysisRequest.SerializeToString,
            tone__service__pb2.ToneAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TrainUserModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tone.ToneAnalysisService/TrainUserModel',
            tone__service__pb2.TrainModelRequest.SerializeToString,
            tone__service__pb2.TrainModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
