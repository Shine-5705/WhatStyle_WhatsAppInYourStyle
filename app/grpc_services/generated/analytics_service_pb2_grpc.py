# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import analytics_service_pb2 as analytics__service__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in analytics_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AnalyticsServiceStub(object):
    """===== ANALYTICS SERVICE =====
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetConversationAnalytics = channel.unary_unary(
                '/analytics.AnalyticsService/GetConversationAnalytics',
                request_serializer=analytics__service__pb2.ConversationAnalyticsRequest.SerializeToString,
                response_deserializer=analytics__service__pb2.ConversationAnalyticsResponse.FromString,
                _registered_method=True)
        self.GetUserAnalytics = channel.unary_unary(
                '/analytics.AnalyticsService/GetUserAnalytics',
                request_serializer=analytics__service__pb2.UserAnalyticsRequest.SerializeToString,
                response_deserializer=analytics__service__pb2.UserAnalyticsResponse.FromString,
                _registered_method=True)
        self.GetSystemMetrics = channel.unary_unary(
                '/analytics.AnalyticsService/GetSystemMetrics',
                request_serializer=analytics__service__pb2.SystemMetricsRequest.SerializeToString,
                response_deserializer=analytics__service__pb2.SystemMetricsResponse.FromString,
                _registered_method=True)
        self.StreamAnalytics = channel.unary_stream(
                '/analytics.AnalyticsService/StreamAnalytics',
                request_serializer=analytics__service__pb2.AnalyticsStreamRequest.SerializeToString,
                response_deserializer=analytics__service__pb2.AnalyticsUpdate.FromString,
                _registered_method=True)
        self.GenerateReport = channel.unary_unary(
                '/analytics.AnalyticsService/GenerateReport',
                request_serializer=analytics__service__pb2.ReportRequest.SerializeToString,
                response_deserializer=analytics__service__pb2.ReportResponse.FromString,
                _registered_method=True)


class AnalyticsServiceServicer(object):
    """===== ANALYTICS SERVICE =====
    """

    def GetConversationAnalytics(self, request, context):
        """Get conversation analytics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserAnalytics(self, request, context):
        """Get user behavior analytics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSystemMetrics(self, request, context):
        """Get system performance metrics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamAnalytics(self, request, context):
        """Stream real-time analytics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateReport(self, request, context):
        """Generate analytics report
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalyticsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetConversationAnalytics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConversationAnalytics,
                    request_deserializer=analytics__service__pb2.ConversationAnalyticsRequest.FromString,
                    response_serializer=analytics__service__pb2.ConversationAnalyticsResponse.SerializeToString,
            ),
            'GetUserAnalytics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserAnalytics,
                    request_deserializer=analytics__service__pb2.UserAnalyticsRequest.FromString,
                    response_serializer=analytics__service__pb2.UserAnalyticsResponse.SerializeToString,
            ),
            'GetSystemMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemMetrics,
                    request_deserializer=analytics__service__pb2.SystemMetricsRequest.FromString,
                    response_serializer=analytics__service__pb2.SystemMetricsResponse.SerializeToString,
            ),
            'StreamAnalytics': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamAnalytics,
                    request_deserializer=analytics__service__pb2.AnalyticsStreamRequest.FromString,
                    response_serializer=analytics__service__pb2.AnalyticsUpdate.SerializeToString,
            ),
            'GenerateReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateReport,
                    request_deserializer=analytics__service__pb2.ReportRequest.FromString,
                    response_serializer=analytics__service__pb2.ReportResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'analytics.AnalyticsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('analytics.AnalyticsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AnalyticsService(object):
    """===== ANALYTICS SERVICE =====
    """

    @staticmethod
    def GetConversationAnalytics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/analytics.AnalyticsService/GetConversationAnalytics',
            analytics__service__pb2.ConversationAnalyticsRequest.SerializeToString,
            analytics__service__pb2.ConversationAnalyticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserAnalytics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/analytics.AnalyticsService/GetUserAnalytics',
            analytics__service__pb2.UserAnalyticsRequest.SerializeToString,
            analytics__service__pb2.UserAnalyticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSystemMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/analytics.AnalyticsService/GetSystemMetrics',
            analytics__service__pb2.SystemMetricsRequest.SerializeToString,
            analytics__service__pb2.SystemMetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamAnalytics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/analytics.AnalyticsService/StreamAnalytics',
            analytics__service__pb2.AnalyticsStreamRequest.SerializeToString,
            analytics__service__pb2.AnalyticsUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/analytics.AnalyticsService/GenerateReport',
            analytics__service__pb2.ReportRequest.SerializeToString,
            analytics__service__pb2.ReportResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
